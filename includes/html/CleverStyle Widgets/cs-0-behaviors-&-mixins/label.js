// Generated by CoffeeScript 1.9.3

/**
 * @package   CleverStyle Widgets
 * @author    Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @copyright Copyright (c) 2015, Nazar Mokrynskyi
 * @license   MIT License, see license.txt
 */

(function() {
  Polymer.cs.behaviors.label = {
    properties: {
      active: {
        notify: true,
        observer: '_active_changed',
        reflectToAttribute: true,
        type: Boolean
      },
      focus: {
        reflectToAttribute: true,
        type: Boolean
      },
      value: {
        notify: true,
        type: String
      }
    },
    attached: function() {
      requestAnimationFrame((function(_this) {
        return function() {
          var fn, i, input, inputs, len;
          (function() {
            var next_node, ref;
            next_node = _this.nextSibling;
            if (next_node && next_node.nodeType === Node.TEXT_NODE && ((ref = next_node.nextSibling) != null ? typeof ref.getAttribute === "function" ? ref.getAttribute('is') : void 0 : void 0) === _this.is) {
              return next_node.parentNode.removeChild(next_node);
            }
          })();
          _this.local_input = _this.querySelector('input');
          _this.active = _this.local_input.checked;
          if (_this.local_input.name) {
            inputs = _this.parentNode.querySelectorAll('input[name="' + _this.local_input.name + '"]');
          } else {
            inputs = _this._inputs_around();
          }
          fn = function(input) {
            input.addEventListener('change', function() {
              _this.value = input.value;
              _this.active = _this.local_input.value === input.value;
              _this.local_input.checked = _this.local_input.value === input.value;
            });
            if (input.checked) {
              _this.value = input.value;
            }
          };
          for (i = 0, len = inputs.length; i < len; i++) {
            input = inputs[i];
            fn(input);
          }
          _this.local_input.addEventListener('focus', function() {
            return _this.focus = true;
          });
          _this.local_input.addEventListener('blur', function() {
            return _this.focus = false;
          });
        };
      })(this));
    },
    _inputs_around: function() {
      var input, inputs, label;
      inputs = [];
      inputs.push(this.local_input);
      label = this;
      while (label = label.previousElementSibling) {
        if (label.tagName !== 'LABEL') {
          break;
        }
        input = label.querySelector('input');
        if (!input) {
          break;
        }
        inputs.push(input);
      }
      label = this;
      while (label = label.nextElementSibling) {
        if (label.tagName !== 'LABEL') {
          break;
        }
        input = label.querySelector('input');
        if (!input) {
          break;
        }
        inputs.push(input);
      }
      return inputs;
    },
    _active_changed: function() {
      if (this.local_input.checked === this.active) {
        return;
      }
      if (this.local_input.type === 'radio') {
        if (this.active) {
          return this.click();
        }
      } else {
        return this.local_input.checked = this.active;
      }
    }
  };

}).call(this);
