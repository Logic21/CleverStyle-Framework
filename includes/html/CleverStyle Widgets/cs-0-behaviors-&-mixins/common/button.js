// Generated by CoffeeScript 1.9.3

/**
 * @package   CleverStyle Widgets
 * @author    Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @copyright Copyright (c) 2015, Nazar Mokrynskyi
 * @license   MIT License, see license.txt
 */

(function() {
  Polymer.cs.behaviors.button = {
    properties: {
      action: {
        type: String,
        value: 'button_action'
      },
      active: {
        notify: true,
        reflectToAttribute: true,
        type: Boolean
      },
      bind: {
        observer: '_bind_changed',
        type: Object
      },
      empty: {
        reflectToAttribute: true,
        type: Boolean
      },
      icon: {
        reflectToAttribute: true,
        type: String
      },
      iconAfter: {
        reflectToAttribute: true,
        type: String
      },
      primary: {
        reflectToAttribute: true,
        type: Boolean
      }
    },
    listeners: {
      tap: '_tap'
    },
    attached: function() {
      this.empty = !this.childNodes.length;
    },
    _bind_changed: function() {
      var bind_element, observer;
      if (this.bind) {
        bind_element = this.bind;
        this.bind = null;
        this._tap = bind_element[this.action].bind(bind_element);
        observer = new MutationObserver((function(_this) {
          return function(mutations) {
            mutations.forEach(function(mutation) {
              var i, len, node, ref;
              if (!mutation.removedNodes) {
                return;
              }
              ref = mutation.removedNodes;
              for (i = 0, len = ref.length; i < len; i++) {
                node = ref[i];
                if (node !== bind_element) {
                  return;
                }
                observer.disconnect();
                setTimeout((function() {
                  if (!bind_element.parentNode) {
                    _this._tap = function() {};
                  } else {
                    observer.observe(bind_element.parentNode, {
                      childList: true
                    });
                  }
                }), 1000);
              }
            });
          };
        })(this));
        observer.observe(bind_element.parentNode, {
          childList: true,
          subtree: false
        });
      }
    },
    _tap: function() {}
  };

}).call(this);
