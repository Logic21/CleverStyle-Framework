// Generated by CoffeeScript 1.9.3

/**
 * @package   CleverStyle Widgets
 * @author    Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @copyright Copyright (c) 2015, Nazar Mokrynskyi
 * @license   MIT License, see license.txt
 */

(function() {
  var tooltip_element;

  tooltip_element = null;

  Polymer({
    'is': 'cs-tooltip',
    properties: {
      show: {
        reflectToAttribute: true,
        type: Boolean
      },
      showQuick: {
        reflectToAttribute: true,
        type: Boolean
      },
      top: {
        reflectToAttribute: true,
        type: Boolean
      }
    },
    attached: function() {
      var hide, parent, show;
      parent = this.parentNode;
      if (parent.tagName !== 'HTML') {
        parent.removeChild(this);
        this._initialize_tooltip();
        show = tooltip_element.show.bind(tooltip_element, parent);
        hide = tooltip_element.hide.bind(tooltip_element, parent);
        parent.addEventListener('mouseenter', show);
        parent.addEventListener('pointerenter', show);
        parent.addEventListener('mouseleave', hide);
        parent.addEventListener('pointerleave', hide);
      } else {
        this.addEventListener('mouseenter', (function(_this) {
          return function() {
            _this.show = true;
          };
        })(this));
        this.addEventListener('pointerenter', (function(_this) {
          return function() {
            _this.show = true;
          };
        })(this));
        this.addEventListener('mouseleave', (function(_this) {
          return function() {
            _this.show = false;
          };
        })(this));
        this.addEventListener('pointerleave', (function(_this) {
          return function() {
            _this.show = false;
          };
        })(this));
      }
    },
    _initialize_tooltip: function() {
      if (!tooltip_element) {
        tooltip_element = document.createElement('cs-tooltip');
        document.body.parentNode.appendChild(tooltip_element);
      }
    },
    show: function(element) {
      var tooltip_position;
      if (this.innerHTML !== element.tooltip) {
        this.innerHTML = element.tooltip;
      }
      tooltip_position = this._get_tooltip_position(element);
      this.style.top = tooltip_position.top + 'px';
      this.style.left = tooltip_position.left + 'px';
      this.top = tooltip_position.arrow_top;
      this.$.arrow.style.left = -tooltip_position.arrow_left_offset + 'px';
      this.$.arrow.style.right = tooltip_position.arrow_left_offset + 'px';
      this.show = true;
    },
    hide: function() {
      this.show = false;
    },
    _get_tooltip_size: function() {
      var tooltip_size;
      this.style.left = -innerWidth;
      this.style.top = -innerHeight;
      this.showQuick = true;
      tooltip_size = this.getBoundingClientRect();
      this.showQuick = false;
      return tooltip_size;
    },
    _get_tooltip_position: function(element) {
      var element_position, left_offset, tooltip_position, tooltip_size;
      tooltip_size = this._get_tooltip_size();
      element_position = element.getBoundingClientRect();
      tooltip_position = {
        top: scrollY,
        left: scrollX,
        arrow_top: false,
        arrow_left_offset: 0
      };
      if (element_position.top > tooltip_size.height) {
        tooltip_position.top += element_position.top - tooltip_size.height;
      } else {
        tooltip_position.arrow_top = true;
        tooltip_position.top += element_position.bottom + element_position.height;
      }
      left_offset = element_position.left + (element_position.width / 2) - (tooltip_size.width / 2);
      if (left_offset > 0) {
        tooltip_position.left += left_offset;
      } else {
        console.log(tooltip_size.width / 2);
        console.log(element_position.left);
        console.log(element_position.width);
        tooltip_position.arrow_left_offset = (tooltip_size.width / 2) - element_position.left - (element_position.width / 2);
      }
      return tooltip_position;
    }
  });

}).call(this);
