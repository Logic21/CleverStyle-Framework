// Generated by LiveScript 1.4.0
/**
 * @package   CleverStyle CMS
 * @author    Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @copyright Copyright (c) 2015, Nazar Mokrynskyi
 * @license   MIT License, see license.txt
 */
(function(){
  /**
   * Events system similar to one found on backend, including available methods and arguments order, but instead of returning boolean it returns Promise instance
   * Similarly, callbacks may return either boolean result or no result (just like on backend) or Promise instance or any other object that has compatible `then`
   * method (jQuery Deferred as example)
   */
  var callbacks, Callbacks_resolver, slice$ = [].slice;
  cs.Event = (callbacks = {}, {
    on: function(event, callback){
      if (event && callback) {
        if (!callbacks[event]) {
          callbacks[event] = [];
        }
        callbacks[event].push(callback);
      }
      return this;
    },
    off: function(event, callback){
      if (!callbacks[event]) {} else if (!callback) {
        delete callbacks[event];
      } else {
        callbacks[event] = callbacks[event].filter(function(c){
          return c !== callback;
        });
      }
      return this;
    },
    once: function(event, callback){
      var callback_, this$ = this;
      if (event && callback) {
        callback_ = function(){
          this$.off(event, callback_);
          return callback.apply(callback, arguments);
        };
        this.on(event, callback_);
      }
      return this;
    },
    fire: function(event){
      var params;
      params = slice$.call(arguments, 1);
      return new Promise(function(resolve, reject){
        if (event && callbacks[event] && callbacks[event].length) {
          new Callbacks_resolver(callbacks[event], params, resolve, reject);
        } else {
          resolve();
        }
      });
    }
  });
  Object.freeze(cs.Event);
  /**
   * Utility callback resolver class
   */
  Callbacks_resolver = (function(){
    Callbacks_resolver.displayName = 'Callbacks_resolver';
    var prototype = Callbacks_resolver.prototype, constructor = Callbacks_resolver;
    prototype.index = 0;
    function Callbacks_resolver(callbacks, params, resolve, reject){
      this.callbacks = callbacks;
      this.params = params;
      this.resolve = resolve;
      this.reject = reject;
      this.execute();
    }
    prototype.execute = function(){
      var callback, result;
      callback = this.callbacks[this.index];
      ++this.index;
      if (!callback) {
        this.resolve();
        return;
      }
      result = callback.apply(callback, this.params);
      if (result === false) {
        this.reject();
      } else if (result && result.then instanceof Function) {
        result.then(bind$(this, 'execute'), this.reject);
      } else {
        this.resolve();
      }
    };
    return Callbacks_resolver;
  }());
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);
