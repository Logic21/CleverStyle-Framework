// Generated by CoffeeScript 1.9.3

/**
 * @package		CleverStyle CMS
 * @author		Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @copyright	Copyright (c) 2013-2015, Nazar Mokrynskyi
 * @license		MIT License, see license.txt
 */

(function() {
  (function($) {
    var helpers;
    helpers = {

      /**
      		 * Connecting form elements in ShadowDOM to form element higher in DOM tree, should be called on element.shadowRoot
       */
      connect_to_parent_form: function() {
        return this.each(function() {
          var $form, element, results;
          if (WebComponents.flags.shadow) {
            return;
          }
          element = this;
          results = [];
          while (true) {
            if (element.tagName === 'FORM') {
              $form = $(element);
              $form.one('submit', (function(_this) {
                return function(e) {
                  e.preventDefault();
                  e.stopImmediatePropagation();
                  $(_this).find('[name]').each(function() {
                    var $this;
                    $this = $(this);
                    if (this.type === 'file') {
                      $this.clone(true, true).insertAfter($this.hide());
                      return $this.appendTo($form);
                    } else {
                      if ((this.type === 'checkbox' || this.type === 'radio') && !$this.is(':checked')) {
                        return;
                      }
                      return $form.append($('<input type="hidden"/>').attr('name', this.name).val($this.val()));
                    }
                  });
                  return $form.submit();
                };
              })(this));
              break;
            }
            element = element.host || element.parentNode;
            if (!element) {
              break;
            } else {
              results.push(void 0);
            }
          }
          return results;
        });
      }
    };

    /**
    	 * cs helper registration or running (if no parameters specified)
    	 *
    	 * @param {string}		name
    	 * @param {function}	helper
     */
    return $.fn.cs = function(name, helper) {
      var func, public_helpers;
      if (name && helper) {
        helpers[name] = helper;
        return this;
      }
      public_helpers = {};
      for (name in helpers) {
        func = helpers[name];
        public_helpers[name] = func.bind(this);
      }
      return public_helpers;
    };
  })(jQuery);

}).call(this);
