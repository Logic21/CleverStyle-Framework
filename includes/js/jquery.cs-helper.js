// Generated by CoffeeScript 1.4.0

/**
 * @package		UIkit Helper
 * @author		Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @copyright	Copyright (c) 2013, Nazar Mokrynskyi
 * @license		MIT License, see license.txt
*/


(function() {

  (function($) {
    $.fn.cs = function() {
      var this_;
      this_ = this;
      return {
        /**
        		 * Radio buttons with UIkit
        		 *
        		 * Required DOM structure * > label > input:radio, plugin may be applied to any of these elements
        */

        radio: function() {
          var collection;
          if (!this_.length) {
            return this_;
          }
          collection = [];
          this_.each(function() {
            var radio;
            radio = $(this);
            if (!radio.is(':radio')) {
              radio = radio.find(':radio');
            }
            return collection.push(radio.parent().parent().get());
          });
          collection = $($.unique(collection));
          collection.each(function() {
            return $(this).addClass('uk-button-group').attr('data-uk-button-radio', '').children('label').addClass('uk-button').click(function() {
              return $(this).find(':radio').prop('checked', true).change();
            }).find(':radio').change(function() {
              var $this;
              $this = $(this);
              if (!$this.is(':checked')) {
                return;
              }
              return $this.parent().parent().children('.uk-active').removeClass('uk-active').end().end().addClass('uk-active');
            }).filter(':checked').parent().addClass('uk-active');
          });
          return this;
        },
        /**
        		 * Checkboxes with UIkit
        		 *
        		 * Required DOM structure * > label > input:checkbox, plugin may be applied to any of these elements
        */

        checkbox: function() {
          var collection;
          if (!this_.length) {
            return this_;
          }
          collection = [];
          this_.each(function() {
            var checkbox;
            checkbox = $(this);
            if (!checkbox.is(':checkbox')) {
              checkbox = checkbox.find(':checkbox');
            }
            return collection.push(checkbox.parent().parent().get());
          });
          collection = $($.unique(collection));
          collection.each(function() {
            return $(this).addClass('uk-button-group').attr('data-uk-button-checkbox', '').children('label').addClass('uk-button').click(function() {
              return $(this).find(':radio:not(:checked)').prop('checked', true).change();
            }).find(':checkbox').change(function() {
              var $this;
              $this = $(this);
              if (!$this.is(':checked')) {
                return;
              }
              return $this.parent().parent().children('.uk-active').removeClass('uk-active').end().end().addClass('uk-active');
            }).filter(':checked').parent().addClass('uk-active');
          });
          return this;
        },
        /**
        		 * Tabs with UIkit
        		 *
        		 * Required DOM structure *+*, where first element contains list of tabs, and second element content of each tab, plugin must be applied to the first element
        */

        tabs: function() {
          var UI;
          if (!this_.length) {
            return this_;
          }
          UI = $.UIkit;
          return this_.each(function() {
            var $this, content;
            $this = $(this);
            content = $this.next();
            $this.addClass('uk-tab').attr('data-uk-tab', '').children().each(function() {
              var li;
              li = $(this);
              if (!li.children('a').length) {
                return li.wrapInner('<a />');
              }
            }).first().addClass('uk-active');
            $this.data("tab", new UI.tab($this, {
              connect: content
            }));
            content.addClass('uk-switcher uk-margin').children(':first').addClass('uk-active');
            return content.data("switcher", new UI.switcher(content));
          });
        },
        /**
        		 * Tooltip with Twitter Bootstrap
        		 *
        		 * Required DOM structure * > label > input:radio, plugin may be applied to any of these elements
        */

        tooltip: function() {
          if (!this_.length) {
            return this_;
          }
          return this_.tooltip({
            html: true,
            container: 'body',
            placement: 'auto top',
            delay: 200
          });
        },
        /**
        		 * Tooltip with UIkit
        		 *
        		 * Required title or data-title attribute with some content, optionally support data-pos attribute with desired position of tooltip
        */

        /*tooltip		: ->
        			if !this_.length
        				return this_
        			UI	= $.UIkit
        			this.each ->
        				$this	= $(this)
        				if !$this.attr('title')
        					$this
        						.attr('title', $this.data('title'))
        						.attr('data-title', '')
        				pos		= $this.data('pos')
        				$this
        					.attr('data-uk-tooltip', if pos then "{pos:'#{pos}'}" else '')
        */

        /**
        		 * Dialog with Twitter Bootstrap
        		 *
        		 * Required DOM structure * > *, plugin must be applied to the root element
        		 * If child element is not present - content will be automatically wrapped with <div>
        */

        modal: function(mode) {
          var UI;
          if (!this_.length) {
            return this_;
          }
          UI = $.UIkit;
          mode = mode || 'init';
          return this_.each(function() {
            var $this, content, modal;
            $this = $(this);
            if (!$this.data('modal')) {
              $this.addClass('uk-modal').data('modal', new UI.modal.Modal($this));
              content = $this.children();
              if (!content.length) {
                content = $this.wrapInner('<div />').children();
              }
              content.addClass('uk-modal-dialog uk-modal-dialog-slide');
              if ($this.data('modal-frameless')) {
                content.addClass('uk-modal-dialog-frameless');
              }
              if ($this.attr('title')) {
                $('<h3 />').html($this.attr('title')).prependTo(content);
              }
              if (content.attr('title')) {
                $('<h3 />').html(content.attr('title')).prependTo(content);
              }
            }
            modal = $this.data('modal');
            switch (mode) {
              case 'show':
                return modal.show();
              case 'hide':
                return modal.hide();
            }
          });
        }
      };
    };
  })(jQuery);

}).call(this);
