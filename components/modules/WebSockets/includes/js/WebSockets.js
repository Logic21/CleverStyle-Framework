// Generated by CoffeeScript 1.4.0

/**
 * @package   WebSockets
 * @category  modules
 * @author    Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @copyright Copyright (c) 2015, Nazar Mokrynskyi
 * @license   MIT License, see license.txt
*/


(function() {

  window.cs.ws = (function() {
    var handlers, methods, socket;
    handlers = {};
    methods = {
      'on': function(action, callback, error) {
        if (!handlers[action]) {
          handlers[action] = [];
        }
        handlers[action].push([callback, error]);
      },
      'off': function(action, callback, error) {
        var h, index, _i, _len, _ref;
        if (!handlers[action]) {
          return;
        }
        _ref = handlers[action];
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          h = _ref[index];
          if (h[0] === callback) {
            h[0] = void 0;
          }
          if (h[1] === error) {
            h[1] = void 0;
          }
          if (h[0] === void 0 && h[1] === void 0) {
            delete handlers[action][index];
          }
        }
      },
      send: function(action, details) {
        return socket.send(JSON.stringify([action, details]));
      }
    };
    socket = new WebSocket((function() {
      var proto;
      proto = location.protocol === 'https:' ? 'wss' : 'ws';
      return "" + proto + "://" + location.host + "/WebSockets";
    })());
    socket.onopen = function() {
      return methods.send('Client/authentication', {
        session: cs.getcookie('session'),
        user_agent: navigator.userAgent
      });
    };
    socket.onmessage = function(message) {
      var action, action_handlers, details, type, _ref, _ref1, _ref2;
      _ref = JSON.parse(message.data), action = _ref[0], details = _ref[1];
      _ref1 = action.split(':'), action = _ref1[0], type = _ref1[1];
      action_handlers = handlers[action];
      if (!action_handlers || !action_handlers.length) {
        return;
      }
      if ((_ref2 = typeof details) === 'boolean' || _ref2 === 'number' || _ref2 === 'string') {
        details = [details];
      }
      action_handlers.forEach(function(h) {
        if (type === 'error') {
          return h[1] && h[1].apply(h[1], details);
        } else {
          return h[0] && h[0].apply(h[0], details);
        }
      });
    };
    return methods;
  })();

}).call(this);
