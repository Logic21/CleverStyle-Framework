// Generated by CoffeeScript 1.9.3

/**
 * @package    CleverStyle CMS
 * @subpackage System module
 * @category   modules
 * @author     Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @copyright  Copyright (c) 2015, Nazar Mokrynskyi
 * @license    MIT License, see license.txt
 */

(function() {
  var L;

  L = cs.Language;

  Polymer({
    'is': 'cs-system-admin-components-blocks-list',
    behaviors: [cs.Polymer.behaviors.Language],
    properties: {
      blocks: Object,
      blocks_count: Number,
      positions: {
        notify: true,
        type: String
      }
    },
    ready: function() {
      return $.getJSON('api/System/admin/blocks', (function(_this) {
        return function(blocks) {
          var blocks_grouped;
          _this.blocks_count = blocks.length;
          blocks_grouped = {
            top: [],
            left: [],
            floating: [],
            right: [],
            bottom: []
          };
          blocks.forEach(function(block, index) {
            block.index = index;
            blocks_grouped[block.position].push(block);
          });
          _this.set('blocks', blocks_grouped);
          _this._init_sortable();
        };
      })(this));
    },
    _init_sortable: function() {
      var $group, $shadowRoot;
      $shadowRoot = $(this.shadowRoot);
      if ($shadowRoot.find('[group] > div:not(:first)').length < this.blocks_count) {
        setTimeout(this._init_sortable.bind(this), 100);
        return;
      }
      $group = $shadowRoot.find('[group]');
      $group.sortable({
        connectWith: 'blocks-list',
        items: 'div:not(:first)',
        placeholder: '<div class="cs-block-primary">'
      }).on('sortupdate', (function(_this) {
        return function() {
          return _this.positions = JSON.stringify({
            top: $group.filter('[group=top]').children('div:not(:first)').map(function() {
              return this.index;
            }).get(),
            left: $group.filter('[group=left]').children('div:not(:first)').map(function() {
              return this.index;
            }).get(),
            floating: $group.filter('[group=floating]').children('div:not(:first)').map(function() {
              return this.index;
            }).get(),
            right: $group.filter('[group=right]').children('div:not(:first)').map(function() {
              return this.index;
            }).get(),
            bottom: $group.filter('[group=bottom]').children('div:not(:first)').map(function() {
              return this.index;
            }).get()
          });
        };
      })(this));
    },
    _status_class: function(active) {
      if (active == 1) {
        return 'cs-block-success cs-text-success';
      } else {
        return 'cs-block-warning cs-text-warning';
      }
    },
    _block_permissions: function(e) {
      var title;
      title = cs.Language.permissions_for_block(e.model.item.title);
      return cs.ui.simple_modal("<h2>" + title + "</h2>\n<cs-system-admin-permissions-for-item label=\"" + e.model.item.index + "\" group=\"Block\"/>");
    }
  });

}).call(this);
