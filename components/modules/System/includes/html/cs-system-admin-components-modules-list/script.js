// Generated by LiveScript 1.4.0
/**
 * @package    CleverStyle CMS
 * @subpackage System module
 * @category   modules
 * @author     Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @copyright  Copyright (c) 2015, Nazar Mokrynskyi
 * @license    MIT License, see license.txt
 */
(function(){
  var L;
  L = cs.Language;
  Polymer({
    'is': 'cs-system-admin-components-modules-list',
    behaviors: [cs.Polymer.behaviors.Language],
    ready: function(){
      var this$ = this;
      return $.getJSON('api/System/admin/modules', function(modules){
        modules.forEach(function(module){
          module['class'] = (function(){
            switch (module.active) {
            case -1:
              return 'cs-block-error cs-text-error';
            case 0:
              return 'cs-block-warning cs-text-warning';
            case 1:
              return 'cs-block-success cs-text-success';
            }
          }());
          module.icon = (function(){
            switch (module.active) {
            case -1:
              return 'times';
            case 0:
              return 'minus';
            case 1:
              if (module.is_default) {
                return 'home';
              } else {
                return 'check';
              }
            }
          }());
          module.icon_text = (function(){
            switch (module.active) {
            case -1:
              return L.uninstalled;
            case 0:
              return L.disabled;
            case 1:
              if (module.is_default) {
                return L.default_module;
              } else {
                return L.enabled;
              }
            }
          }());
          module.name_localized = L[module.name] || module.name.replace('_', ' ');
          (function(){
            var i$, ref$, len$, prop, ref1$, tag;
            for (i$ = 0, len$ = (ref$ = ['api', 'license', 'readme']).length; i$ < len$; ++i$) {
              prop = ref$[i$];
              if ((ref1$ = module[prop]) != null && ref1$.type) {
                tag = module[prop].type === 'txt' ? 'pre' : 'div';
                module[prop].content = "<" + tag + ">" + module[prop].content + "</" + tag + ">";
              }
            }
          })();
          if (module.meta) {
            module.info = (function(){
              return L.module_info(this['package'], this.version, this.description, this.author, this.website || L.none, this.license, this.db_support
                ? this.db_support.join(', ')
                : L.none, this.storage_support
                ? this.storage_support.join(', ')
                : L.none, this.provide
                ? [].concat(this.provide).join(', ')
                : L.none, this.require
                ? [].concat(this.require).join(', ')
                : L.none, this.conflict
                ? [].concat(this.conflict).join(', ')
                : L.none, this.optional
                ? [].concat(this.optional).join(', ')
                : L.none, this.multilingual && this.multilingual.indexOf('interface') !== -1
                ? L.yes
                : L.no, this.multilingual && this.multilingual.indexOf('content') !== -1
                ? L.yes
                : L.no, this.languages
                ? this.languages.join(', ')
                : L.none);
            }.call(module.meta));
          }
        });
        this$.set('modules', modules);
      });
    }
  });
}).call(this);
