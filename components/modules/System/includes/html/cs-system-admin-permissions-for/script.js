// Generated by CoffeeScript 1.9.3

/**
 * @package    CleverStyle CMS
 * @subpackage System module
 * @category   modules
 * @author     Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @copyright  Copyright (c) 2015, Nazar Mokrynskyi
 * @license    MIT License, see license.txt
 */

(function() {
  var L;

  L = cs.Language;

  Polymer({
    'is': 'cs-system-admin-permissions-for',
    behaviors: [cs.Polymer.behaviors.Language],
    properties: {
      'for': {
        type: String,
        value: ''
      },
      group: '',
      user: '',
      tooltip_animation: '{animation:true,delay:200}'
    },
    all_permissions: {},
    permissions: {},
    ready: function() {
      var workarounds_timeout;
      $.when($.getJSON('api/System/admin/permissions'), $.getJSON("api/System/admin/" + this["for"] + "s/" + this[this["for"]] + "/permissions")).done((function(_this) {
        return function(all_permissions, permissions) {
          var group, id, label, labels;
          _this.all_permissions = (function() {
            var ref, results;
            ref = all_permissions[0];
            results = [];
            for (group in ref) {
              labels = ref[group];
              results.push({
                group: group,
                labels: (function() {
                  var results1;
                  results1 = [];
                  for (label in labels) {
                    id = labels[label];
                    results1.push({
                      name: label,
                      id: id
                    });
                  }
                  return results1;
                })()
              });
            }
            return results;
          })();
          return _this.permissions = permissions[0];
        };
      })(this));
      $(this.$['search-results']).on('change', ':radio', function() {
        return $(this).closest('cs-table-row').addClass('changed');
      });
      workarounds_timeout = null;
      return this.addEventListener('dom-change', (function(_this) {
        return function() {
          clearTimeout(workarounds_timeout);
          return workarounds_timeout = setTimeout((function() {
            return $(_this.shadowRoot).cs().radio_buttons_inside().cs().tabs_inside();
          }), 100);
        };
      })(this));
    },
    save: function() {
      var default_data, key, value;
      default_data = ((function() {
        var ref, results;
        ref = $.ajaxSettings.data;
        results = [];
        for (key in ref) {
          value = ref[key];
          results.push(key + '=' + value);
        }
        return results;
      })()).join('&');
      return $.ajax({
        url: "api/System/admin/" + this["for"] + "s/" + this[this["for"]] + "/permissions",
        data: $(this.$.form).serialize() + '&' + default_data,
        type: 'post',
        success: function() {
          return UIkit.notify(L.changes_saved.toString(), 'success');
        }
      });
    },
    invert: function(e) {
      return $(e.currentTarget).closest('div').find(':radio:not(:checked)[value!=-1]').parent().click();
    },
    allow_all: function(e) {
      return $(e.currentTarget).closest('div').find(':radio[value=1]').parent().click();
    },
    deny_all: function(e) {
      return $(e.currentTarget).closest('div').find(':radio[value=0]').parent().click();
    },
    permission_state: function(id, expected) {
      var permission;
      permission = this.permissions[id];
      return permission == expected || (expected == '-1' && permission === void 0);
    },
    permission_class: function(id, expected) {
      return 'uk-button' + (this.permission_state(id, expected) ? ' uk-active' : '');
    }
  });

}).call(this);
