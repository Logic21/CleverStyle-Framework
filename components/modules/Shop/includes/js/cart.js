// Generated by CoffeeScript 1.4.0

/**
 * @package   Shop
 * @category  modules
 * @author    Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @copyright Copyright (c) 2014-2015, Nazar Mokrynskyi
 * @license   MIT License, see license.txt
*/


(function() {

  cs.shop.cart = (function() {
    var add_item, clean, del_item, get_item, get_items, items, items_storage, params, set_item;
    items_storage = {
      get: function() {
        var data;
        if (data = cs.getcookie('shop_cart_items')) {
          return JSON.parse(data);
        } else {
          return {};
        }
      },
      set: function(items) {
        return cs.setcookie('shop_cart_items', JSON.stringify(items), new Date / 1000 + 86400);
      }
    };
    params = (function() {
      var params_, update_params;
      params_ = localStorage.shop_cart_params;
      params_ = params_ ? JSON.parse(params_) : {};
      update_params = function() {
        return localStorage.shop_cart_params = JSON.stringify(params_);
      };
      return {
			get shipping_type () { return params_.shipping_type; },
			set shipping_type (val) { params_.shipping_type = val; update_params(); },

			get shipping_username () { return params_.shipping_username; },
			set shipping_username (val) { params_.shipping_username = val; update_params(); },

			get phone () { return params_.phone; },
			set phone (val) { params_.phone = val; update_params(); },

			get address () { return params_.address; },
			set address (val) { params_.address = val; update_params(); },

			get comment () { return params_.comment; },
			set comment (val) { params_.comment = val; update_params(); }
		};
    })();
    get_items = function() {
      return items_storage.get();
    };
    get_item = function(id) {
      return items[id] || 0;
    };
    add_item = function(id) {
      if (items[id]) {
        ++items[id];
      } else {
        items[id] = 1;
      }
      items_storage.set(items);
      return items[id];
    };
    set_item = function(id, units) {
      items[id] = units;
      return items_storage.set(items);
    };
    del_item = function(id) {
      delete items[id];
      return items_storage.set(items);
    };
    items = get_items();
    clean = function() {
      items = {};
      return items_storage.set(items);
    };
    return {
      get_all: get_items,
      get_calculated: function(callback) {
        items = get_items();
        if (!items) {
          return;
        }
        return $.ajax({
          url: 'api/Shop/cart',
          data: {
            items: items,
            shipping_type: params.shipping_type
          },
          type: 'get',
          success: callback
        });
      },
      get: get_item,
      add: add_item,
      set: set_item,
      del: del_item,
      clean: clean,
      params: params
    };
  })();

}).call(this);
