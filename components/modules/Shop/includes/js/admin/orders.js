// Generated by CoffeeScript 1.9.3

/**
 * @package   Shop
 * @category  modules
 * @author    Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @copyright Copyright (c) 2014-2016, Nazar Mokrynskyi
 * @license   MIT License, see license.txt
 */

(function() {
  $(function() {
    var L, make_modal;
    L = cs.Language;
    make_modal = function(shipping_types, order_statuses, payment_methods, title, action) {
      var details, method, modal, payment_methods_list, shipping_types_list;
      shipping_types = (function() {
        var shipping_type, shipping_types_;
        shipping_types_ = {};
        for (shipping_type in shipping_types) {
          shipping_type = shipping_types[shipping_type];
          shipping_types_[shipping_type.id] = shipping_type;
        }
        return shipping_types_;
      })();
      shipping_types_list = (function() {
        var i, key, keys, len, results, shipping_type, shipping_types_list_;
        shipping_types_list_ = {};
        keys = [];
        for (shipping_type in shipping_types) {
          shipping_type = shipping_types[shipping_type];
          shipping_types_list_[shipping_type.title] = "<option value=\"" + shipping_type.id + "\">" + shipping_type.title + "</option>";
          keys.push(shipping_type.title);
        }
        keys.sort();
        results = [];
        for (i = 0, len = keys.length; i < len; i++) {
          key = keys[i];
          results.push(shipping_types_list_[key]);
        }
        return results;
      })();
      shipping_types_list = shipping_types_list.join('');
      order_statuses = (function() {
        var i, key, keys, len, order_status, order_statuses_, results;
        order_statuses_ = {};
        keys = [];
        for (order_status in order_statuses) {
          order_status = order_statuses[order_status];
          order_statuses_[order_status.title] = "<option value=\"" + order_status.id + "\">" + order_status.title + "</option>";
          keys.push(order_status.title);
        }
        keys.sort();
        results = [];
        for (i = 0, len = keys.length; i < len; i++) {
          key = keys[i];
          results.push(order_statuses_[key]);
        }
        return results;
      })();
      order_statuses = order_statuses.join('');
      payment_methods_list = (function() {
        var results;
        results = [];
        for (method in payment_methods) {
          details = payment_methods[method];
          results.push("<option value=\"" + method + "\">" + details.title + "</option>");
        }
        return results;
      })();
      payment_methods_list = payment_methods_list.join('');
      modal = $(cs.ui.simple_modal("<form>\n	<h3 class=\"cs-text-center\">" + title + "</h3>\n	<p hidden>\n		" + L.shop_datetime + ": <span class=\"date\"></span>\n	</p>\n	<p>\n		" + L.shop_user + ": <span class=\"username\"></span>, id: <input is=\"cs-input-text\" compact name=\"user\" required>\n	</p>\n	<p>\n		<div class=\"items\"></div>\n		<button is=\"cs-button\" class=\"add-item\">" + L.shop_add_item + "</button>\n	</p>\n	<p>\n		" + L.shop_shipping_type + ": <select is=\"cs-select\" name=\"shipping_type\" required>" + shipping_types_list + "</select>\n	</p>\n	<p>\n		" + L.shop_shipping_cost + ": <input is=\"cs-input-text\" name=\"shipping_cost\"> (<span id=\"shipping_cost\"></span>)\n	</p>\n	<p>\n		" + L.shop_shipping_username + ": <input is=\"cs-input-text\" name=\"shipping_username\">\n	</p>\n	<p>\n		" + L.shop_shipping_phone + ": <input is=\"cs-input-text\" name=\"shipping_phone\">\n	</p>\n	<p>\n		" + L.shop_shipping_address + ": <textarea is=\"cs-textarea\" autosize name=\"shipping_address\"></textarea>\n	</p>\n	<p>\n		" + L.shop_payment_method + ": <select is=\"cs-select\" name=\"payment_method\" required>" + payment_methods_list + "</select>\n	</p>\n	<p>\n		" + L.shop_paid + ":\n		<label is=\"cs-label-button\"><input type=\"radio\" name=\"paid\" value=\"1\"> " + L.shop_yes + "</label>\n		<label is=\"cs-label-button\"><input type=\"radio\" name=\"paid\" value=\"0\" checked> " + L.shop_no + "</label>\n	</p>\n	<p>\n		" + L.shop_status + ": <select is=\"cs-select\" name=\"status\" required>" + order_statuses + "</select>\n	</p>\n	<p>\n		" + L.shop_comment + ": <textarea is=\"cs-textarea\" autosize name=\"comment\"></textarea>\n	</p>\n	<p>\n		<button is=\"cs-button\" primary type=\"submit\">" + action + "</button>\n	</p>\n</form>"));
      (function() {
        var timeout;
        timeout = 0;
        return modal.find('[name=user]').keyup(function() {
          clearTimeout(timeout);
          return timeout = setTimeout(((function(_this) {
            return function() {
              return $.getJSON('api/System/profiles/' + $(_this).val(), function(profile) {
                return modal.find('.username').html(profile.username || profile.login);
              });
            };
          })(this)), 300);
        });
      })();
      (function() {
        var shipping_type_select;
        shipping_type_select = modal.find('[name=shipping_type]');
        shipping_type_select.change(function() {
          var shipping_type;
          shipping_type = shipping_types[$(this).val()];
          modal.find('[name=shipping_phone]').parent()[parseInt(shipping_type.phone_needed) ? 'show' : 'hide']();
          modal.find('[name=shipping_address]').parent()[parseInt(shipping_type.address_needed) ? 'show' : 'hide']();
          return modal.find('#shipping_cost').html(shipping_type.price);
        });
        return shipping_type_select.change();
      })();
      (function() {
        var items_container, timeout;
        items_container = modal.find('.items');
        modal.add_item = function(item) {
          var callback;
          callback = function(item_data) {
            var total_price;
            total_price = item_data.price * item.units;
            items_container.append("<p>\n	" + L.shop_item + ": <input is=\"cs-input-text\" compact value=\"-\" class=\"title\" readonly>\n	id: <input is=\"cs-input-text\" compact name=\"items[item][]\" value=\"" + item.item + "\" required>\n	" + L.shop_unit_price + " <input is=\"cs-input-text\" compact name=\"items[unit_price][]\" value=\"" + item.unit_price + "\" required> (<span class=\"unit-price\">" + item_data.price + "</span>)\n	" + L.shop_units + " <input is=\"cs-input-text\" compact name=\"items[units][]\" value=\"" + item.units + "\" required>\n	" + L.shop_total_price + " <input is=\"cs-input-text\" compact name=\"items[price][]\" value=\"" + item.price + "\" required> (<span class=\"item-price\" data-original-price=\"" + item_data.price + "\">" + total_price + "</span>)\n	<button is=\"cs-button\" icon=\"close\" type=\"button\" class=\"delete-item\"></button>\n</p>");
            return items_container.children(':last').find('.title').val(item_data.title);
          };
          if (item.item) {
            return $.getJSON("api/Shop/admin/items/" + item.item, callback);
          } else {
            return callback({
              title: '-',
              price: 0
            });
          }
        };
        timeout = 0;
        return items_container.on('keyup change', "[name='items[units][]']", function() {
          var $this, item_price_container;
          $this = $(this);
          item_price_container = $this.parent().find('.item-price');
          return item_price_container.html(item_price_container.data('original-price') * $this.val());
        }).on('keyup', "[name='items[item][]']", function() {
          clearTimeout(timeout);
          return timeout = setTimeout(((function(_this) {
            return function() {
              var $this, container;
              $this = $(_this);
              container = $this.parent();
              return $.ajax({
                url: 'api/Shop/admin/items/' + $this.val(),
                type: 'get',
                success: function(item) {
                  container.find('.title').val(item.title);
                  container.find('.unit-price').html(item.price);
                  container.find('.item-price').data('original-price', item.price);
                  return container.find("[name='items[units][]']").change();
                },
                error: function() {
                  container.find('.title').val('-');
                  container.find('.unit-price').html(0);
                  container.find('.item-price').data('original-price', 0);
                  return container.find("[name='items[units][]']").change();
                }
              });
            };
          })(this)), 300);
        }).on('click', '.delete-item', function() {
          return $(this).parent().remove();
        });
      })();
      return modal.on('click', '.add-item', function() {
        return modal.add_item({
          item: '',
          unit_price: '',
          units: '',
          price: ''
        });
      });
    };
    return $('html').on('mousedown', '.cs-shop-order-add', function() {
      return Promise.all([$.getJSON('api/Shop/admin/shipping_types'), $.getJSON('api/Shop/admin/order_statuses'), $.getJSON('api/Shop/payment_methods')]).then(function(arg) {
        var modal, order_statuses, payment_methods, shipping_types;
        shipping_types = arg[0], order_statuses = arg[1], payment_methods = arg[2];
        modal = make_modal(shipping_types, order_statuses, payment_methods, L.shop_order_addition, L.shop_add);
        return modal.find('form').submit(function() {
          var data;
          data = $(this).serialize();
          $.ajax({
            url: 'api/Shop/admin/orders',
            type: 'post',
            data: data,
            success: function(url) {
              url = url.split('/');
              return $.ajax({
                url: 'api/Shop/admin/orders/' + url.pop() + '/items',
                type: 'put',
                data: data,
                success: function() {
                  alert(L.shop_added_successfully);
                  return location.reload();
                }
              });
            }
          });
          return false;
        });
      });
    }).on('mousedown', '.cs-shop-order-statuses-history', function() {
      var id;
      id = $(this).data('id');
      return Promise.all([$.getJSON('api/Shop/admin/order_statuses'), $.getJSON("api/Shop/admin/orders/" + id + "/statuses")]).then(function(arg) {
        var content, order_statuses, statuses;
        order_statuses = arg[0], statuses = arg[1];
        order_statuses = (function() {
          var result;
          result = {};
          order_statuses.forEach(function(status) {
            return result[status.id] = status;
          });
          return result;
        })();
        content = '';
        statuses.forEach(function(status) {
          var color, comment, order_status;
          order_status = order_statuses != null ? order_statuses[status.status] : void 0;
          color = order_status ? "background: " + order_status.color : '';
          comment = status.comment ? "<tr style=\"" + color + "\">\n	<td colspan=\"2\" style=\"white-space:pre\">" + status.comment + "</td>\n</tr>" : '';
          return content += "<tr style=\"" + color + "\">\n	<td><cs-icon icon=\"calendar\"></cs-icon> " + status.date_formatted + "</td>\n	<td>" + (order_status != null ? order_status.title : void 0) + "</td>\n</tr>\n" + comment;
        });
        return cs.ui.simple_modal("<table class=\"cs-table\" list>" + content + "</table>");
      });
    }).on('mousedown', '.cs-shop-order-edit', function() {
      var $this, date, id, username;
      $this = $(this);
      id = $this.data('id');
      username = $this.data('username');
      date = $this.data('date');
      return Promise.all([$.getJSON('api/Shop/admin/shipping_types'), $.getJSON('api/Shop/admin/order_statuses'), $.getJSON('api/Shop/payment_methods'), $.getJSON("api/Shop/admin/orders/" + id), $.getJSON("api/Shop/admin/orders/" + id + "/items")]).then(function(arg) {
        var items, modal, order, order_statuses, payment_methods, shipping_types;
        shipping_types = arg[0], order_statuses = arg[1], payment_methods = arg[2], order = arg[3], items = arg[4];
        modal = make_modal(shipping_types, order_statuses, payment_methods, L.shop_order_edition, L.shop_edit);
        modal.find('form').submit(function() {
          var data;
          data = $(this).serialize();
          $.ajax({
            url: "api/Shop/admin/orders/" + id,
            type: 'put',
            data: data,
            success: function() {
              return $.ajax({
                url: "api/Shop/admin/orders/" + id + "/items",
                type: 'put',
                data: data,
                success: function() {
                  alert(L.shop_edited_successfully);
                  return location.reload();
                }
              });
            }
          });
          return false;
        });
        modal.find('.date').html(date).parent().removeAttr('hidden');
        modal.find('.username').html(username);
        modal.find('[name=user]').val(order.user);
        modal.find('[name=shipping_phone]').val(order.shipping_phone);
        modal.find('[name=shipping_address]').val(order.shipping_address);
        modal.find('[name=shipping_type]').val(order.shipping_type).change();
        modal.find('[name=shipping_cost]').val(order.shipping_cost).change();
        modal.find('[name=shipping_username]').val(order.shipping_username).change();
        modal.find('[name=payment_method]').val(order.payment_method);
        modal.find('[name=paid][value=' + (parseInt(order.paid) ? 1 : 0) + ']').prop('checked', true);
        modal.find('[name=status]').val(order.status);
        modal.find('[name=comment]').val(order.comment);
        return items.forEach(function(item) {
          return modal.add_item(item);
        });
      });
    }).on('mousedown', '.cs-shop-order-delete', function() {
      var id;
      id = $(this).data('id');
      if (confirm(L.shop_sure_want_to_delete)) {
        return $.ajax({
          url: "api/Shop/admin/orders/" + id,
          type: 'delete',
          success: function() {
            alert(L.shop_deleted_successfully);
            return location.reload();
          }
        });
      }
    });
  });

}).call(this);
