// Generated by LiveScript 1.4.0
/**
 * @package   Composer
 * @category  modules
 * @author    Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @copyright Copyright (c) 2015-2016, Nazar Mokrynskyi
 * @license   MIT License, see license.txt
 */
(function(){
  var L;
  L = cs.Language('composer_');
  Polymer({
    'is': 'cs-composer',
    behaviors: [cs.Polymer.behaviors.Language('composer_')],
    properties: {
      action: String,
      canceled: Boolean,
      force: Boolean,
      'package': String,
      status: String,
      category: String
    },
    ready: function(){
      var this$ = this;
      cs.Event.once('admin/Composer/canceled', function(){
        this$.canceled = true;
      });
      $.ajax({
        url: 'api/Composer',
        type: this.action !== 'install' ? 'delete' : 'post',
        data: {
          name: this['package'],
          category: this.category,
          force: this.force
        },
        success: function(result){
          var status;
          status = (function(){
            switch (result.code) {
            case 0:
              return L.updated_successfully;
            case 1:
              return L.update_failed;
            case 2:
              return L.dependencies_conflict;
            }
          }());
          this$.status = status;
          if (result.description) {
            $(this$.$.result).show().html(result.description);
          }
          if (!result.code && !this$.force) {
            setTimeout(function(){
              cs.Event.fire('admin/Composer/updated');
            }, 2000);
          }
        }
      });
      setTimeout(bind$(this, '_update_progress'), 1000);
    },
    _update_progress: function(){
      var this$ = this;
      $.getJSON('api/Composer', function(data){
        var ref$, scroll_after;
        if (this$.status || this$.canceled) {
          return;
        }
        if ((ref$ = this$.parentElement.$) != null && ref$.content) {
          scroll_after = this$.parentElement.$.content.scrollHeight - this$.parentElement.$.content.offsetHeight === this$.parentElement.$.content.scrollTop;
        }
        $(this$.$.result).show().html(data);
        if (scroll_after) {
          this$.parentElement.$.content.scrollTop = this$.parentElement.$.content.scrollHeight - this$.parentElement.$.content.offsetHeight;
        }
        setTimeout(bind$(this$, '_update_progress'), 1000);
      });
    }
  });
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);
