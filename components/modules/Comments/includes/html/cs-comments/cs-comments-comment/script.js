// Generated by LiveScript 1.4.0
/**
 * @package   Comments
 * @category  modules
 * @author    Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @copyright Copyright (c) 2016, Nazar Mokrynskyi
 * @license   MIT License, see license.txt
 */
(function(){
  Polymer({
    'is': 'cs-comments-comment',
    behaviors: [cs.Polymer.behaviors.cs, cs.Polymer.behaviors.Language('comments_')],
    properties: {
      comment: Object,
      parentComment: Object,
      date: {
        type: String,
        computed: '_date(comment.date, comment.date_formatted, comment.time_formatted)'
      },
      date_iso8601: {
        type: String,
        computed: '_date_iso8601(comment.date)'
      },
      location: location.pathname,
      reply: Object,
      editing: false,
      replying: false
    },
    ready: function(){
      this._this = this;
      this.scopeSubtree(this.$.text, true);
    },
    attached: function(){
      if (this.comment.scroll_to) {
        setTimeout(bind$(this, '_scroll_to'), 300);
      }
    },
    _scroll_to: function(){
      $('html, body').stop().animate({
        scrollTop: this.offsetTop
      });
    },
    _scroll_to_parent: function(){
      this.parentComment._scroll_to();
    },
    _date: function(date, date_formatted, time_formatted){
      if (Math.abs(date - (new Date).getTime() / 1000) < 3600 * 24) {
        return time_formatted;
      } else {
        return date_formatted;
      }
    },
    _date_iso8601: function(date){
      var d;
      d = new Date;
      d.setTime(date * 1000);
      return d.toISOString();
    },
    reload: function(){
      this.parentComment.reload();
    },
    _edit: function(){
      this.set('comment.edited_text', this.comment.text);
      this.editing = true;
    },
    _save_edit: function(){
      var this$ = this;
      $.ajax({
        url: 'api/Comments/' + this.comment.id,
        type: 'put',
        data: {
          text: this.comment.edited_text
        },
        success: function(){
          cs.ui.notify(this$.L.saved, 'success', 5);
          this$.reload();
          this$._cancel_edit();
        }
      });
    },
    _cancel_edit: function(){
      this.editing = false;
    },
    _reply: function(){
      this.set('reply', {
        parent: this.comment.id,
        module: this.comment.module,
        item: this.comment.item,
        text: ''
      });
      this.replying = true;
    },
    _post_reply: function(){
      var this$ = this;
      $.ajax({
        url: 'api/Comments',
        type: 'post',
        data: this.reply,
        success: function(){
          cs.ui.notify(this$.L.reply_posted, 'success', 5);
          this$.reload();
          this$._cancel_reply();
        }
      });
    },
    _cancel_reply: function(){
      this.replying = false;
    },
    _delete: function(){
      var this$ = this;
      cs.ui.confirm(this.L.sure_to_delete, function(){
        $.ajax({
          url: 'api/Comments/' + this$.comment.id,
          type: 'delete',
          success: function(){
            cs.ui.notify(this$.L.deleted, 'success', 5);
            this$.reload();
          }
        });
      });
    }
  });
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);
