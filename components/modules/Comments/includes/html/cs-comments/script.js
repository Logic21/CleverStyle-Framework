// Generated by LiveScript 1.4.0
/**
 * @package   Comments
 * @category  modules
 * @author    Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @copyright Copyright (c) 2016, Nazar Mokrynskyi
 * @license   MIT License, see license.txt
 */
(function(){
  var GUEST_ID;
  GUEST_ID = 1;
  Polymer({
    'is': 'cs-comments',
    behaviors: [cs.Polymer.behaviors.Language('comments_')],
    properties: {
      module: String,
      item: Number,
      comments: Array,
      _this: Object,
      text: '',
      is_user: Boolean
    },
    ready: function(){
      this.anchor = location.hash.substr(1);
      this._this = this;
      this.reload();
    },
    reload: function(){
      var this$ = this;
      Promise.all([
        $.getJSON('api/Comments?module=' + this.module + '&item=' + this.item), $.getJSON('api/System/profile'), $.ajax({
          url: 'api/Comments',
          type: 'is_admin'
        })
      ]).then(function(arg$){
        var comments, profile, is_admin, id_index_map, is_user, i$, len$, index, comment, normalized_comments;
        comments = arg$[0], profile = arg$[1], is_admin = arg$[2];
        id_index_map = {};
        is_user = profile.id !== GUEST_ID;
        this$.is_user = is_user;
        for (i$ = 0, len$ = comments.length; i$ < len$; ++i$) {
          index = i$;
          comment = comments[i$];
          id_index_map[comment.id] = index;
          comment.children = [];
          comment.can_edit = is_admin || comment.user === profile.id;
          comment.can_reply = is_user;
          comment.scroll_to = this$.anchor === 'comment_' + comment.id;
        }
        normalized_comments = [];
        for (i$ = 0, len$ = comments.length; i$ < len$; ++i$) {
          index = i$;
          comment = comments[i$];
          if (!comment.parent) {
            normalized_comments.push(comment);
          } else {
            comments[id_index_map[comment.parent]].children.push(comment);
          }
        }
        for (i$ = 0, len$ = comments.length; i$ < len$; ++i$) {
          index = i$;
          comment = comments[i$];
          comment.can_delete = comment.can_edit && !comment.children.length;
        }
        this$.set('comments', normalized_comments);
        delete this$.anchor;
      });
    },
    _send: function(){
      var this$ = this;
      $.ajax({
        url: 'api/Comments',
        type: 'post',
        data: {
          module: this.module,
          item: this.item,
          text: this.text,
          parent: 0
        },
        success: function(){
          cs.ui.notify(this$.L.comment_posted, 'success', 5);
          this$.reload();
          this$.text = '';
        }
      });
    }
  });
}).call(this);
