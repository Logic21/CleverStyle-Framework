<?php
/**
 * @package   CleverStyle CMS
 * @author    Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @copyright Copyright (c) 2015, Nazar Mokrynskyi
 * @license   MIT License, see license.txt
 */
/**
 * Base system functions, do not edit this file, or make it very carefully
 * otherwise system workability may be broken
 *
 * This particular file contains functions that work with global state (cookies, headers, status codes, etc.)
 */
use
	cs\Config;
/**
 * Function for setting cookies on all mirrors and taking into account cookies prefix. Parameters like in system function, but $path, $domain and $secure
 * are skipped, they are detected automatically, and $api parameter added in the end.
 *
 * @param string $name
 * @param string $value
 * @param int    $expire
 * @param bool   $httponly
 *
 * @return bool
 */
function _setcookie ($name, $value, $expire = 0, $httponly = false) {
	static $path, $domain, $prefix, $secure;
	$Config = Config::instance(true);
	if ($Config && !isset($prefix)) {
		$prefix = $Config->core['cookie_prefix'];
		$secure = $Config->server['protocol'] == 'https';
		$domain = $Config->core['cookie_domain'][$Config->server['mirror_index']];
		$path   = $Config->core['cookie_path'][$Config->server['mirror_index']];
	}
	if (!isset($prefix)) {
		$prefix = '';
	}
	$_COOKIE[$prefix.$name] = $value;
	if (isset($domain)) {
		return setcookie(
			$prefix.$name,
			$value,
			$expire,
			$path,
			$domain,
			$secure,
			$httponly
		);
	} else {
		return setcookie(
			$prefix.$name,
			$value,
			$expire,
			'/',
			$_SERVER->host,
			false,
			$httponly
		);
	}
}

/**
 * Function for getting of cookies, taking into account cookies prefix
 *
 * @param $name
 *
 * @return bool
 */
function _getcookie ($name) {
	static $prefix;
	if (!isset($prefix)) {
		$Config = Config::instance(true);
		$prefix = $Config->core['cookie_prefix'] ? $Config->core['cookie_prefix'].'_' : '';
	}
	return isset($_COOKIE[$prefix.$name]) ? $_COOKIE[$prefix.$name] : false;
}

/**
 * Function that is used to define errors by specifying error code, and system will account this in its operation
 *
 * @param int|null $code
 *
 * @return int                <b>0</b> if no errors, error code otherwise
 */
function error_code ($code = null) {
	static $stored_code = 0;
	if (
		$code !== null &&
		(
			!$stored_code || $code == 0 //Allows to reset error code, but not allows to redefine by other code directly
		)
	) {
		$stored_code = $code;
	}
	return $stored_code;
}

/**
 * Is current path from administration area?
 *
 * @param bool|null $admin_path
 *
 * @return bool
 */
function admin_path ($admin_path = null) {
	static $stored_admin_path = false;
	if ($admin_path !== null) {
		$stored_admin_path = $admin_path;
	}
	return $stored_admin_path;
}

/**
 * Is current path from api area?
 *
 * @param bool|null $api_path
 *
 * @return bool
 */
function api_path ($api_path = null) {
	static $stored_api_path = false;
	if ($api_path !== null) {
		$stored_api_path = $api_path;
	}
	return $stored_api_path;
}

/**
 * Name of currently used module (for generation of current page)
 *
 * @param null|string $current_module
 *
 * @return bool
 */
function current_module ($current_module = null) {
	static $stored_current_module = '';
	if ($current_module !== null) {
		$stored_current_module = $current_module;
	}
	return $stored_current_module;
}

/**
 * Is current page a home page?
 *
 * @param bool|null $home_page
 *
 * @return bool
 */
function home_page ($home_page = null) {
	static $stored_home_page = false;
	if ($home_page !== null) {
		$stored_home_page = $home_page;
	}
	return $stored_home_page;
}

